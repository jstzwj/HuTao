
Mod ::= { Stmt };
Stmt ::= FunctionDefinition
        | ClassDefinition;
FunctionDefinition ::=  "fn", whitespaces, identifier,
    optionalws, "(", optionalws, Arguments, optionalws, ")",
    optionalws, "{", optionalws, { Stmt }, {Expr}, [Expr], optionalws, "}";
ClassDefinition ::= "class", identifier, ["extends", { ",", identifier }];

Expr ::= BoolOp | BinOp | UnaryOp;
Arguments ::= { identifier, ":", identifier };

BoolOp ::= OrOp | AndOp;
AndOp ::= Expr, "&&", Expr;
OrOp ::= Expr, "||", Expr;

BinOp ::= AddOp | SubOp | MulOp;
AddOp ::= Expr, "+", Expr;
SubOp ::= Expr, "-", Expr;
MulOp ::= Expr, "*", Expr;

UnaryOp ::= NotOp;
NotOp ::= "!", Expr;

identifier ::= "_" | alphabetic , [ { alphabetic | digit } ];
alphabetic ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" |
            "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
whitespace ::= " " | "\t" | "\n";
whitespaces ::= { whitespace };
optionalws ::= [{ whitespace }];